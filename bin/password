#!/usr/bin/env ruby
require 'io/console'
require 'tempfile'
require 'securerandom'
require 'yaml'
require 'json'

def openssl(action, password, in_path, out_path)
  cli = ["openssl", "enc"]
  cli << "-in" << in_path
  cli << "-d" if action == :decrypt
  cli << "-aes-256-cbc"
  cli << "-pass" << %'pass:#{password}'
  cli << "-out" << out_path
  IO.popen(cli, err: [:child, :out]) { }
  $?.success?
end

def decrypted?(path)
  YAML.parse File.read path
  true
rescue YAML::Exception, SystemCallError
  false
end

passwords_dir = ENV.fetch('PASSWORDS_DIR')

if ARGV.one?
  name = ARGV.fetch 0
elsif ARGV.none?
  $stdout.puts Dir[File.join(passwords_dir, '*')].map { |f| File.basename f }
  exit 0
else
  $stderr.puts "Currently there is no API for taking multiple arguments"
  exit 1
end

path = File.join passwords_dir, name
$stderr.print "Enter your master password: "
pass = IO.console.getpass
file = Tempfile.new ["#{name}.", ".yaml"]

if File.exist? path
  unless openssl(:decrypt, pass, path, file.path) && decrypted?(file.path)
    $stderr.puts "Invalid password"
    exit 1
  end
else
  $stderr.print "Confirm your password: "
  confirmation = IO.console.getpass
  if pass != confirmation
    $stderr.puts "Password did not match the confirmation!"
    exit 1
  end
  file.write <<~YAML
    ---
    name:     #{name.inspect}
    username: my_username
    email:    someone@provider.com
    password: #{SecureRandom.alphanumeric(20).inspect}
    url:      'something.com/login'
    notes: |
      take
      notes
      here
  YAML
end


file.close
begin
  if $stdout.tty?
    system 'vim', file.path
    if decrypted? file.path
      openssl :encrypt, pass, file.path, path
    else
      $stderr.puts "Not valid YAML!"
      $stdout.puts File.read file.path
      exit 1
    end
  else
    data = YAML.load File.read file.path
    default = data["default"] || "password"
    $stdout.puts data.fetch(default)
    # $stdout.puts JSON.pretty_generate YAML.load File.read file.path
    # File.open(file.path, 'r') { |src| IO.copy_stream src, $stdout }
  end
ensure
  file.unlink
end
